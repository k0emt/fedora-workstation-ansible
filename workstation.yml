---
- hosts: localhost
  become: true

  vars_files:
    - vars/git_user_vars.yml
    - vars/global_vars.yml

  pre_tasks:
    - name: Get global git username
      become: false
      command: git config --global user.name
      register: git_user_name
      ignore_errors: true

    - name: Get global git user email
      become: false
      command: git config --global user.email
      register: git_user_email
      ignore_errors: true

    - name: Debug - are git user variables set
      become: false
      debug:
        msg: 
          - "Git user variables are set"
          - "git_user_name: {{ git_user_name }}"
          - "git_user_email: {{ git_user_email }}"
      ignore_errors: true

    - name: Set initial git username state
      set_fact:
        git_config:
          username: "{{ git_user_name.stdout | default('') }}"
          needs_setup: "{{ not git_user_name.stdout | bool }}"

    - name: Request Git username if not configured
      block:
        - name: Prompt for Git username
          pause:
            prompt: "Please enter your full name for Git configuration (leave empty to skip)"
          register: git_username_prompt
          when: git_config.needs_setup

        - name: Validate and set Git username
          set_fact:
            git_config: "{{ git_config | combine({
              'username': git_username_prompt.user_input | default(git_config.username),
              'needs_setup': false }) }}"
          when: git_username_prompt.user_input is defined and git_username_prompt.user_input | trim != ''
          
        - name: Display Git username configuration status
          debug:
            msg: "Git username is now set to: {{ git_config.username }}"
          when: not git_config.needs_setup
      become: false
      when: git_config.needs_setup

    - name: "Git Configuration: Handle User Email"
      block:
        - name: Check if git email needs configuration
          set_fact:
            needs_email_config: "{{ git_user_email | default('set.your.email@example.com') == 'set.your.email@example.com' }}"
    
        - name: Collect Git user email
          pause:
            prompt: "Please enter your Git email address"
          register: git_email_input
          when: needs_email_config
          
        - name: Validate email format
          assert:
            that:
              - git_email_input.user_input is match('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')
            fail_msg: "Invalid email format. Please use a valid email address."
          when: needs_email_config
    
        - name: Set Git user email
          set_fact:
            git_user_email: "{{ git_email_input.user_input }}"
          when: needs_email_config
      become: false
      tags:
        - git
        - config

  roles:
    - git_user
    - power_user
    - app_user
    - amateur_radio
    - developer
    - ai_researcher
    - database_engineer
    # communicator
